# NOTE: This file is auto generated by OpenAPI Generator 6.2.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule ContifyAPI.Api.Topics do
  @moduledoc """
  API calls for all endpoints tagged `Topics`.
  """

  alias ContifyAPI.Connection
  import ContifyAPI.RequestBuilder

  @doc """
  Returns a list of all active Custom Topics created by the authenticated user.

  ### Parameters

  - `connection` (ContifyAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, ContifyAPI.Model.CustomTopicsGet200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec custom_topics_get(Tesla.Env.client(), keyword()) ::
          {:ok, ContifyAPI.Model.Error.t()}
          | {:ok, ContifyAPI.Model.CustomTopicsGet200Response.t()}
          | {:ok, String.t()}
          | {:error, Tesla.Env.t()}
  def custom_topics_get(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/custom-topics/")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %ContifyAPI.Model.CustomTopicsGet200Response{}},
      {400, %ContifyAPI.Model.Error{}},
      {403, false},
      {404, %ContifyAPI.Model.Error{}},
      {405, %ContifyAPI.Model.Error{}},
      {500, %ContifyAPI.Model.Error{}},
      {503, false}
    ])
  end

  @doc """
  This endpoint lets you delete a particular Custom Topic.

  ### Parameters

  - `connection` (ContifyAPI.Connection): Connection to server
  - `id` (float()): id of custom topic that you want to deleted
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec custom_topics_id_delete(Tesla.Env.client(), float(), keyword()) ::
          {:ok, nil}
          | {:ok, ContifyAPI.Model.Error.t()}
          | {:ok, String.t()}
          | {:error, Tesla.Env.t()}
  def custom_topics_id_delete(connection, id, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/custom-topics/#{id}/")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {400, %ContifyAPI.Model.Error{}},
      {403, false},
      {404, %ContifyAPI.Model.Error{}},
      {405, %ContifyAPI.Model.Error{}},
      {500, %ContifyAPI.Model.Error{}},
      {503, false}
    ])
  end

  @doc """
  Returns details of a particular Custom Topic.

  ### Parameters

  - `connection` (ContifyAPI.Connection): Connection to server
  - `id` (float()): ID of custom topic for which details has to be fetched
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, ContifyAPI.Model.CustomTopicResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec custom_topics_id_get(Tesla.Env.client(), float(), keyword()) ::
          {:ok, ContifyAPI.Model.Error.t()}
          | {:ok, ContifyAPI.Model.CustomTopicResponse.t()}
          | {:ok, String.t()}
          | {:error, Tesla.Env.t()}
  def custom_topics_id_get(connection, id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/custom-topics/#{id}/")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %ContifyAPI.Model.CustomTopicResponse{}},
      {400, %ContifyAPI.Model.Error{}},
      {403, false},
      {404, %ContifyAPI.Model.Error{}},
      {405, %ContifyAPI.Model.Error{}},
      {500, %ContifyAPI.Model.Error{}},
      {503, false}
    ])
  end

  @doc """
  This endpoint lets you update the details of a particular Custom Topic. 

  ### Parameters

  - `connection` (ContifyAPI.Connection): Connection to server
  - `id` (float()): id of custom topic whose details is to be fetched
  - `custom_topic` (CustomTopicsGetRequest): A valid Json Data to update an existing custom topic.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, ContifyAPI.Model.CustomTopicResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec custom_topics_id_put(
          Tesla.Env.client(),
          float(),
          ContifyAPI.Model.CustomTopicsGetRequest.t(),
          keyword()
        ) ::
          {:ok, ContifyAPI.Model.Error.t()}
          | {:ok, ContifyAPI.Model.CustomTopicResponse.t()}
          | {:ok, String.t()}
          | {:error, Tesla.Env.t()}
  def custom_topics_id_put(connection, id, custom_topic, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/custom-topics/#{id}/")
      |> add_param(:body, :body, custom_topic)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %ContifyAPI.Model.CustomTopicResponse{}},
      {400, %ContifyAPI.Model.Error{}},
      {403, false},
      {404, %ContifyAPI.Model.Error{}},
      {405, %ContifyAPI.Model.Error{}},
      {500, %ContifyAPI.Model.Error{}},
      {503, false}
    ])
  end

  @doc """
  This endpoint lets you create a new Custom Topic.

  ### Parameters

  - `connection` (ContifyAPI.Connection): Connection to server
  - `custom_topic` (CustomTopicsGetRequest): The valid Json Data form which, you want to create a custom topic.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, ContifyAPI.Model.CustomTopicResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec custom_topics_post(
          Tesla.Env.client(),
          ContifyAPI.Model.CustomTopicsGetRequest.t(),
          keyword()
        ) ::
          {:ok, ContifyAPI.Model.Error.t()}
          | {:ok, ContifyAPI.Model.CustomTopicResponse.t()}
          | {:ok, String.t()}
          | {:error, Tesla.Env.t()}
  def custom_topics_post(connection, custom_topic, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/custom-topics/")
      |> add_param(:body, :body, custom_topic)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %ContifyAPI.Model.CustomTopicResponse{}},
      {400, %ContifyAPI.Model.Error{}},
      {403, false},
      {404, %ContifyAPI.Model.Error{}},
      {405, %ContifyAPI.Model.Error{}},
      {500, %ContifyAPI.Model.Error{}},
      {503, false}
    ])
  end

  @doc """
  Standard topic list
  Returns a list of standard topics for the authenticated user

  ### Parameters

  - `connection` (ContifyAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, ContifyAPI.Model.IndustriesGet200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec topics_get(Tesla.Env.client(), keyword()) ::
          {:ok, ContifyAPI.Model.IndustriesGet200Response.t()}
          | {:ok, ContifyAPI.Model.Error.t()}
          | {:ok, String.t()}
          | {:error, Tesla.Env.t()}
  def topics_get(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/topics")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %ContifyAPI.Model.IndustriesGet200Response{}},
      {400, %ContifyAPI.Model.Error{}},
      {403, false},
      {404, %ContifyAPI.Model.Error{}},
      {405, %ContifyAPI.Model.Error{}},
      {500, %ContifyAPI.Model.Error{}},
      {503, false}
    ])
  end
end
