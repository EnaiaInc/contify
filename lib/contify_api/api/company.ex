# NOTE: This file is auto generated by OpenAPI Generator 6.2.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule ContifyAPI.Api.Company do
  @moduledoc """
  API calls for all endpoints tagged `Company`.
  """

  alias ContifyAPI.Connection
  import ContifyAPI.RequestBuilder

  @doc """
  Wraps the request_company function.
  """
  def request_company(name, url, app_secret, app_id) do
    connection = Connection.new(app_secret: app_secret, app_id: app_id)
    request_company_get(connection, name, url)
  end

  @doc """
  Request for a company
  This endpoint lets you request for a company not found using search_company endpoint.

  ### Parameters

  - `connection` (ContifyAPI.Connection): Connection to server
  - `name` (String.t): The name of the company that you would like to be added to the system.
  - `url` (String.t): The url of the company that you would like to be added to the system.
  - `opts` (keyword): Optional parameters
    - `:test` (String.t): Pass this parameter in your request if you're testing this endpoint

  ### Returns

  - `{:ok, ContifyAPI.Model.RequestCompanyGet200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec request_company_get(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, ContifyAPI.Model.Error.t()}
          | {:ok, ContifyAPI.Model.RequestCompanyGet200Response.t()}
          | {:ok, String.t()}
          | {:error, Tesla.Env.t()}
  def request_company_get(connection, name, url, opts \\ []) do
    optional_params = %{
      :test => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/request-company")
      |> add_param(:query, :name, name)
      |> add_param(:query, :url, url)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %ContifyAPI.Model.RequestCompanyGet200Response{}},
      {400, %ContifyAPI.Model.Error{}},
      {403, false},
      {404, %ContifyAPI.Model.Error{}},
      {405, %ContifyAPI.Model.Error{}},
      {500, %ContifyAPI.Model.Error{}},
      {503, false}
    ])
  end

  @doc "Wraps the search_company_get/2 function."
  def search_company(query, app_secret, app_id) do
    connection = Connection.new(app_secret: app_secret, app_id: app_id)
    search_company_get(connection, query)
  end

  @doc """
  Search for a Company
  Use the search company end-point to fetch a list of companies against a query string. The elements in the companies list contain an ID value along with additional information like company name, url, HQ country etc. for each company.

  ### Parameters

  - `connection` (ContifyAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:name` (String.t): Name of the company to search
    - `:url` (String.t): Website URL of the company to search
    - `:page` (integer()): Use this to paginate through the list

  ### Returns

  - `{:ok, ContifyAPI.Model.SearchCompanyGet200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec search_company_get(Tesla.Env.client(), keyword()) ::
          {:ok, ContifyAPI.Model.Error.t()}
          | {:ok, ContifyAPI.Model.SearchCompanyGet200Response.t()}
          | {:ok, String.t()}
          | {:error, Tesla.Env.t()}
  def search_company_get(connection, opts \\ []) do
    optional_params = %{
      :name => :query,
      :url => :query,
      :page => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/search-company")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %ContifyAPI.Model.SearchCompanyGet200Response{}},
      {400, %ContifyAPI.Model.Error{}},
      {403, false},
      {404, %ContifyAPI.Model.Error{}},
      {405, %ContifyAPI.Model.Error{}},
      {500, %ContifyAPI.Model.Error{}},
      {503, false}
    ])
  end
end
