# NOTE: This file is auto generated by OpenAPI Generator 6.2.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule ContifyAPI.Api.ContentSource do
  @moduledoc """
  API calls for all endpoints tagged `ContentSource`.
  """

  alias ContifyAPI.Connection
  import ContifyAPI.RequestBuilder

  @doc """
  Search for a Source
  Use the Search Source end-point to fetch a list of sources against a query string. The elements in the sources list contain an ID value along with additional information like source name, domain url, global rank. for each source.

  ### Parameters

  - `connection` (ContifyAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:name` (String.t): Name of the source to search
    - `:url` (String.t): Domain URL of the source to search
    - `:page` (integer()): Use this to paginate through the list

  ### Returns

  - `{:ok, ContifyAPI.Model.SearchSourceGet200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec search_source_get(Tesla.Env.client(), keyword()) ::
          {:ok, ContifyAPI.Model.Error.t()}
          | {:ok, ContifyAPI.Model.SearchSourceGet200Response.t()}
          | {:ok, String.t()}
          | {:error, Tesla.Env.t()}
  def search_source_get(connection, opts \\ []) do
    optional_params = %{
      :name => :query,
      :url => :query,
      :page => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/search-source")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %ContifyAPI.Model.SearchSourceGet200Response{}},
      {400, %ContifyAPI.Model.Error{}},
      {403, false},
      {404, %ContifyAPI.Model.Error{}},
      {405, %ContifyAPI.Model.Error{}},
      {500, %ContifyAPI.Model.Error{}},
      {503, false}
    ])
  end
end
