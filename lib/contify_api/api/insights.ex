# NOTE: This file is auto generated by OpenAPI Generator 6.2.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule ContifyAPI.Api.Insights do
  @moduledoc """
  API calls for all endpoints tagged `Insights`.
  """

  alias ContifyAPI.Connection
  import ContifyAPI.RequestBuilder

  @doc """
  Wraps the insights_get function.
  """
  def insights(params) do
    connection = Connection.new()
    insights_get(connection, params)
  end

  @doc """
  Insights for given company
  Returns a list of insights. The insights can be filtered by company_id, industry_id, topic_id, custom_topic_id, location_id, content_type_id, channel_id, source_id, language_id, keyword, advanced_query . You can paginate through the list by using 'page'.

  ### Parameters

  - `connection` (ContifyAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:company_id` (float()): The company id you want the insights for
    - `:industry_id` (float()): The industry id you want the insights for
    - `:topic_id` (float()): The topic id you want the insights for
    - `:custom_topic_id` (float()): The custom topic id you want the insights for
    - `:location_id` (float()): The location id you want the insights for
    - `:content_type_id` (float()): The content_type id you want the insights for
    - `:channel_id` (float()): To limit search to insights only in specific channels: Social Media (id:54), Stock Exchanges (id:53), Magazines & Journals (id:49), News Website (id:17), Company Website (id:2), Newswire (id:48), Government/ Regulators (id: 47), etc.
    - `:source_id` (float()): The source id you want the insights for
    - `:language_id` (String.t): The language id you want the insights for. You will get it through the language API
    - `:keyword` (String.t): Filter insights by keyword
    - `:advanced_query` (String.t): Filter insights by an advance search query that must include a set of keywords. (View available search operators at https://www.contify.com/newsfeed/advanced-search-help/)
    - `:start_date` (DateTime.t): Filter insights by start date
    - `:end_date` (DateTime.t): Filter insights by end date
    - `:page` (integer()): Use this to paginate through the list
    - `:sort_by` (String.t): Sort insights by date or relevance

  ### Returns

  - `{:ok, ContifyAPI.Model.InsightsResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec insights_get(Tesla.Env.client(), keyword()) ::
          {:ok, ContifyAPI.Model.Error.t()}
          | {:ok, ContifyAPI.Model.InsightsResponse.t()}
          | {:ok, String.t()}
          | {:error, Tesla.Env.t()}
  def insights_get(connection, opts \\ []) do
    optional_params = %{
      :company_id => :query,
      :industry_id => :query,
      :topic_id => :query,
      :custom_topic_id => :query,
      :location_id => :query,
      :content_type_id => :query,
      :channel_id => :query,
      :source_id => :query,
      :language_id => :query,
      :keyword => :query,
      :advanced_query => :query,
      :start_date => :query,
      :end_date => :query,
      :page => :query,
      :sort_by => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/insights")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %ContifyAPI.Model.InsightsResponse{}},
      {400, %ContifyAPI.Model.Error{}},
      {403, false},
      {404, %ContifyAPI.Model.Error{}},
      {405, %ContifyAPI.Model.Error{}},
      {500, %ContifyAPI.Model.Error{}},
      {503, false}
    ])
  end
end
