# NOTE: This file is auto generated by OpenAPI Generator 6.2.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule ContifyAPI.Api.Webhooks do
  @moduledoc """
  API calls for all endpoints tagged `Webhooks`.
  """

  alias ContifyAPI.Connection
  import ContifyAPI.RequestBuilder

  @doc """
  Returns a list of all active Webhooks created by the authenticated user.

  ### Parameters

  - `connection` (ContifyAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, ContifyAPI.Model.WebhookGet200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec webhook_get(Tesla.Env.client(), keyword()) ::
          {:ok, ContifyAPI.Model.WebhookGet200Response.t()}
          | {:ok, ContifyAPI.Model.Error.t()}
          | {:ok, String.t()}
          | {:error, Tesla.Env.t()}
  def webhook_get(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/webhook/")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %ContifyAPI.Model.WebhookGet200Response{}},
      {400, %ContifyAPI.Model.Error{}},
      {403, false},
      {404, %ContifyAPI.Model.Error{}},
      {405, %ContifyAPI.Model.Error{}},
      {500, %ContifyAPI.Model.Error{}},
      {503, false}
    ])
  end

  @doc """
  This endpoint lets you delete a particular Webhook.

  ### Parameters

  - `connection` (ContifyAPI.Connection): Connection to server
  - `id` (float()): ID of webhook that you want to delete
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec webhook_id_delete(Tesla.Env.client(), float(), keyword()) ::
          {:ok, nil}
          | {:ok, ContifyAPI.Model.Error.t()}
          | {:ok, String.t()}
          | {:error, Tesla.Env.t()}
  def webhook_id_delete(connection, id, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/webhook/#{id}/")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {400, %ContifyAPI.Model.Error{}},
      {403, false},
      {404, %ContifyAPI.Model.Error{}},
      {405, %ContifyAPI.Model.Error{}},
      {500, %ContifyAPI.Model.Error{}},
      {503, false}
    ])
  end

  @doc """
  Returns details of a particular Webhook.

  ### Parameters

  - `connection` (ContifyAPI.Connection): Connection to server
  - `id` (float()): ID of webhook for which details has to be fetched
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, ContifyAPI.Model.WebhooksResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec webhook_id_get(Tesla.Env.client(), float(), keyword()) ::
          {:ok, ContifyAPI.Model.Error.t()}
          | {:ok, ContifyAPI.Model.WebhooksResponse.t()}
          | {:ok, String.t()}
          | {:error, Tesla.Env.t()}
  def webhook_id_get(connection, id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/webhook/#{id}/")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %ContifyAPI.Model.WebhooksResponse{}},
      {400, %ContifyAPI.Model.Error{}},
      {403, false},
      {404, %ContifyAPI.Model.Error{}},
      {405, %ContifyAPI.Model.Error{}},
      {500, %ContifyAPI.Model.Error{}},
      {503, false}
    ])
  end

  @doc """
  This endpoint lets you update details of a particular webhook.

  ### Parameters

  - `connection` (ContifyAPI.Connection): Connection to server
  - `id` (float()): ID of webhook whose detail is to be fetched
  - `webhook` (WebhookGetRequest): The valid JSON data from which you want to update Webhook.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, ContifyAPI.Model.WebhooksResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec webhook_id_put(
          Tesla.Env.client(),
          float(),
          ContifyAPI.Model.WebhookGetRequest.t(),
          keyword()
        ) ::
          {:ok, ContifyAPI.Model.Error.t()}
          | {:ok, ContifyAPI.Model.WebhooksResponse.t()}
          | {:ok, String.t()}
          | {:error, Tesla.Env.t()}
  def webhook_id_put(connection, id, webhook, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/webhook/#{id}/")
      |> add_param(:body, :body, webhook)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %ContifyAPI.Model.WebhooksResponse{}},
      {400, %ContifyAPI.Model.Error{}},
      {403, false},
      {404, %ContifyAPI.Model.Error{}},
      {405, %ContifyAPI.Model.Error{}},
      {500, %ContifyAPI.Model.Error{}},
      {503, false}
    ])
  end

  @doc """
  This endpoint lets you create a new webhook

  ### Parameters

  - `connection` (ContifyAPI.Connection): Connection to server
  - `webhook` (WebhookGetRequest): The valid JSON data from which you want to create Webhook.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, ContifyAPI.Model.WebhooksResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec webhook_post(Tesla.Env.client(), ContifyAPI.Model.WebhookGetRequest.t(), keyword()) ::
          {:ok, ContifyAPI.Model.Error.t()}
          | {:ok, ContifyAPI.Model.WebhooksResponse.t()}
          | {:ok, String.t()}
          | {:error, Tesla.Env.t()}
  def webhook_post(connection, webhook, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/webhook/")
      |> add_param(:body, :body, webhook)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %ContifyAPI.Model.WebhooksResponse{}},
      {400, %ContifyAPI.Model.Error{}},
      {403, false},
      {404, %ContifyAPI.Model.Error{}},
      {405, %ContifyAPI.Model.Error{}},
      {500, %ContifyAPI.Model.Error{}},
      {503, false}
    ])
  end

  def subscribe_to_webhook(webhook) do
    connection = Connection.new()
    webhook_post(connection, struct(ContifyAPI.Model.WebhookGetRequest, webhook))
  end

  def list_webhooks() do
    Connection.new()
    |> webhook_get()
  end

  def get_webhook(id) do
    Connection.new()
    |> webhook_id_get(id)
  end

  def update_webhook(id, webhook) do
    Connection.new()
    |> webhook_id_put(id, struct(ContifyAPI.Model.WebhookGetRequest, webhook))
  end

  def delete_webhook(id) do
    Connection.new()
    |> webhook_id_delete(id)
  end
end
